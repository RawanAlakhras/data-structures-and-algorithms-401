/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import java.util.ArrayList;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }
    public static LinkedList zip(LinkedList ls1,LinkedList ls2){
        LinkedList ls3=new LinkedList();
        Node pointer1= ls1.head;
        Node pointer2=ls2.head;
        int i;
        if(ls1.length> ls2.length)
            i=ls1.length;
        else
            i=ls2.length;
        while (i>0){
            if(pointer1 !=null){
                ls3.append(pointer1.value);
                pointer1=pointer1.next;
            }
            if(pointer2 !=null){
                ls3.append(pointer2.value);
                pointer2=pointer2.next;
            }
            i--;
        }
        return ls3;

    }
    public static boolean isPalindrome(LinkedList ls){
        Node pointer =ls.head;
        ArrayList<Integer>arr=new ArrayList<>();
        while (pointer!=null){
            arr.add(pointer.value);
            pointer=pointer.next;
        }
        boolean flag=true;
        int mid=arr.size() / 2;
        for (int i = 0; i < mid && arr.size() != 0; i++) {

            // Check if first and last element are different
            // Then set flag to 1.
            if (arr.get(i) != arr.get(arr.size() - i - 1)) {
                flag = true;
                break;
            }
        }

        // If flag is set then print Not Palindrome
        // else print Palindrome.
        if (flag)
            System.out.println("Palindrome");
        else
            System.out.println("Not Palindrome");



    return flag;
    }

    public static void main(String[] args) {

      /* LinkedList ls=new LinkedList();
        System.out.println(ls.tostring());
        ls.insert(11);
        System.out.println(ls.tostring());
        ls.insert(2);
        System.out.println(ls.tostring());
        ls.insert(23);
        System.out.println(ls.tostring());
        System.out.println("is the list include 23 ?"+ls.includes(23));
        System.out.println("is the list include 1 ?"+ls.includes(1));
        System.out.println("is the list include 0 ?"+ls.includes(0));
        ls.insertBefore(23,0);
        System.out.println(ls.tostring());
        ls.insertBefore(23,1);
        System.out.println(ls.tostring());
        ls.insertBefore(11,10);
        System.out.println(ls.tostring());
        ls.insertAfter(11,12);
        System.out.println(ls.tostring());
        ls.insertAfter(0,-1);
        System.out.println(ls.tostring());
        System.out.println(ls.kth(ls.length));
        LinkedList ls2=new LinkedList();
        ls2.append(1);
        ls2.append(1);
        ls2.append(1);
        ls2.append(1);
        LinkedList ls3=zip(ls,ls2);
        System.out.println(ls3.tostring());

       */
        LinkedList ls4=new LinkedList();
        ls4.append(1);
        ls4.append(2);
        ls4.append(3);
        ls4.append(2);
        ls4.append(1);
        System.out.println(ls4.tostring());
        boolean b=isPalindrome(ls4);
        if (b)
            System.out.println("rawan");







    }
}
