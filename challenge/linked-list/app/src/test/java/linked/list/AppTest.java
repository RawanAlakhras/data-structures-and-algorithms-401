/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked.list;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    //challenge 8
    @Test void zipTest(){
        LinkedList ls1=new LinkedList();
        ls1.append(1);
        LinkedList ls2=new LinkedList();
        ls2.append(2);
        ls2.append(3);
        LinkedList ls3=App.zip(ls1,ls2);
        assertEquals(3,ls3.length);

    }
    //challenge 7
    @Test void kthTest(){
        LinkedList ls=new LinkedList();
        assertEquals(null,ls.kth(1));
        //Where k and the length of the list are the same
        ls.append(1);
        assertEquals(null,ls.kth(1));
        //Where k is not a positive integer
        assertEquals(null,ls.kth(-1));
        //Where the linked list is of a size 1
        assertEquals(1,ls.kth(0));
        //Happy Path
        ls.append(2);
        ls.append(3);
        ls.append(4);
        ls.append(5);
        assertEquals(3,ls.kth(2));



    }
    //challenge 6
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }
    @Test void instantiateEmptyLinkedList(){
        LinkedList ls= new LinkedList();
        assertEquals(null,ls.head,"the head should be empty");
    }
    @Test void insertTest(){
        LinkedList ls= new LinkedList();
        ls.insert(1);
        assertEquals(1,ls.length,"the linked list should have length equle to number of item we inserted");

    }
    @Test void appendTest(){
        LinkedList ls= new LinkedList();
        ls.insert(1);
        assertEquals(1,ls.length,"the linked list should have length equle to number of item we inserted");

    }
    @Test void appendMultiple(){
        LinkedList ls = new LinkedList();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        assertEquals(3,ls.length,"the linked list should have length equle to number of item we inserted");

    }
    @Test void insertBeforeTest(){
        LinkedList ls = new LinkedList();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        ls.insertBefore(3,4);
       assertTrue(ls.includes(4) , "Return true if it finds the test element");

    }
    @Test void insertAfterTest(){
        LinkedList ls = new LinkedList();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        ls.insertBefore(1,4);
        assertTrue(ls.includes(4) , "Return true if it finds the test element");

    }
    @Test void TestHead(){
        LinkedList ls= new LinkedList();
        ls.insert(1);
        ls.insert(2);
        ls.insert(3);
        assertEquals(3,ls.head.value,"the head sould be node 3");

    }
    @Test void insertMultiple(){
        LinkedList ls = new LinkedList();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        assertEquals(3,ls.length,"the linked list should have length equle to number of item we inserted");

    }
    @Test void testIncludes(){
        LinkedList ls = new LinkedList();
        ls.insert(1);
        ls.insert(3);
        ls.insert(2);
        assertEquals(true,ls.includes(3),"number 3 is exists should return true");
        assertEquals(false,ls.includes(0),"number 0 is not exists should return false");

    }
    @Test void tostringTest(){
        LinkedList ls = new LinkedList();
        ls.insert(1);
        ls.insert(3);
        ls.insert(23);
        assertEquals("{ 1 } ->{ 3 } ->{ 23 } ->NULL",ls.tostring(),"should return the list ");
    }

}
