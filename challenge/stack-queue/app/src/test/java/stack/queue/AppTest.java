/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void testStackFuction() throws Exception{
        Stack s1=new Stack();
        //Can successfully instantiate an empty stack
        assertNotNull(s1);

        //Calling pop or peek on empty stack raises exception
        try{
            s1.pop();
        }catch (Exception e){
            assertEquals(e.getMessage(),"you can not delete :the stack is empty");
        }
        try{
            s1.peek();
        }catch (Exception e){
            assertEquals(e.getMessage(),"you can not delete :the stack is empty");
        }

        //Can successfully push onto a stack
        s1.push(1);
        assertEquals(1,s1.length);
        //Can successfully push multiple values onto a stack
        s1.push(2);
        s1.push(3);
        assertEquals(3,s1.length);

        //Can successfully pop off the stack
        assertEquals(3,s1.pop());

        //Can successfully empty a stack after multiple pops
        s1.pop();
        s1.pop();
        assertEquals(0,s1.length);

        //Can successfully peek the next item on the stack
        s1.push(4);
        assertEquals(4,s1.peek());


    }

    @Test
    public void testQueue() throws Exception{
        Queue q1=new Queue();
        //Can successfully instantiate an empty queue
        assertNotNull(q1);

        //Calling pop or peek on empty queue raises exception
        try{
            q1.dequeue();
        }catch (Exception e){
            assertEquals(e.getMessage(),"you can not delete :the queue is empty");
        }

        try{
            q1.peek();
        }catch (Exception e){
            assertEquals(e.getMessage(),"you can not delete :the queue is empty");
        }

        //Can successfully enqueue onto a queue
        q1.enqueue(1);

        assertEquals(1,q1.length);
        //Can successfully enqueue multiple values onto a queue
        q1.enqueue(2);
        q1.enqueue(3);
        assertEquals(3,q1.length);

        //Can successfully dequeue off the queue
        assertEquals(1,q1.dequeue());

        //Can successfully empty a queue after multiple dequeue
        q1.dequeue();
        q1.dequeue();

        assertEquals(0,q1.length);

        //Can successfully peek the next item on the queue
        q1.enqueue(4);


        assertEquals(4,q1.peek());


    }

    @Test
    public void testPseudoQueue() throws Exception {
        PseudoQueue ps1=new PseudoQueue();
        assertNotNull(ps1);
        try{
            ps1.dequeue();
        }catch (Exception e){
            assertEquals(e.getMessage(),"you can not delete :the queue is empty");
        }
        
        ps1.enqueue(1);
        assertEquals("PseudoQueue{{ 1 } ->NULL}",ps1.toString());

        ps1.enqueue(2);
        ps1.enqueue(3);
        assertEquals("PseudoQueue{{ 1 } ->{ 2 } ->{ 3 } ->NULL}",ps1.toString());

        ps1.enqueue(4);
        int l= ps1.dequeue();
        assertEquals(1,l);

    }
    @Test
    public void testAnimalShelter() throws Exception{
        AnimalShelter a1=new AnimalShelter();
        assertNotNull(a1);
        try{
            a1.dequeue("cat");
        }catch (Exception e){
            assertEquals(e.getMessage(),"you can not delete :the queue is empty");
        }
        a1.enqueue(new AnimalNode("cat"));
        assertEquals(1,a1.catlength);
        a1.enqueue(new AnimalNode("dog"));
        assertEquals(1,a1.doglength);


        assertEquals(null,a1.dequeue("dock"));
        assertEquals("cat",a1.dequeue("cat"));
        assertEquals("dog",a1.dequeue("dog"));

        assertEquals(0, a1.catlength);
        assertEquals(0,a1.doglength);



    }
}
