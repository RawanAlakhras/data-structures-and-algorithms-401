/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge;

import java.util.ArrayList;
import java.util.List;

public class App {
    public static KarryTree<String> fizzBuzztree(KarryTree<Integer> kTree){
        List<Integer>arr=new ArrayList<Integer>();
        KarryTree<String> output = new KarryTree<>(kTree.k);
        arr=kTree.breadthFirst(kTree.root);
        for(int i =0 ;i<arr.size();i++){
            if(arr.get(i)%3 ==0 && arr.get(i)%5 ==0){
                output.add("FizzBuzz");
            }
            else if(arr.get(i)%3 == 0){
                output.add("Fizz");
            }
            else if(arr.get(i)%5 == 0){
                output.add("Buzz");
            }
            else {
                output.add(Integer.toString(arr.get(i)));
            }

        }
        return output;
    }

    public static void main(String[] args) {

    BinarySearchTree b1=new BinarySearchTree();
    b1.Add(23);
    b1.Add(42);
    b1.Add(85);
    b1.Add(8);
    b1.Add(16);
        ArrayList <Integer> ls=new ArrayList<>();
        ls=b1.DFTpre(b1.root);
        System.out.println("pre order");
        ls.forEach((n) -> System.out.println(n));
       ArrayList <Integer> ls2=new ArrayList<>();
       ls2=b1.DFTIn(b1.root);
        System.out.println("IN order");
        ls2.forEach((n) -> System.out.println(n));
        ArrayList <Integer> ls3=new ArrayList<>();
        ls3=b1.DFTPost(b1.root);
        System.out.println("post order");
        ls3.forEach((n) -> System.out.println(n));

        ArrayList <Integer> ls4=new ArrayList<>();
        ls4=b1.breadthFirst(b1.root);
        System.out.println("Breadth first");
        ls4.forEach((n) -> System.out.println(n));


        System.out.println("is the tree contain 16 ? "+b1.contains(16));
        System.out.println("is the tree contain 9 ? "+b1.contains(9));
        System.out.println("the max number is " + b1.maximumValue());


    }
}
